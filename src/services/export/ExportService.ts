import { ServiceKey, ServiceScope } from "@microsoft/sp-core-library";
import { ISiteScript } from "../../models/ISiteScript";
import { toJSON } from "../../utils/jsonUtils";
import { ExportPackage } from "../../helpers/ExportPackage";

export interface IExportService {
    generateSiteScriptJSONExportPackage(siteScript: ISiteScript): Promise<ExportPackage>;
    generateSiteScriptPnPPowershellExportPackage(siteScript: ISiteScript): Promise<ExportPackage>;
    generateSiteScriptPnPTemplateExportPackage(siteScript: ISiteScript): Promise<ExportPackage>;
    generateSiteScriptO365CLIExportPackage(siteScript: ISiteScript, flavour: "Powershell" | "Bash"): Promise<ExportPackage>;
}

const Templates = {
    PnPPowerShell_Header: `
#####################################################################################
### PnP Powershell script generated by Site Designs Studio
### Make sure to be logged in with PnP Powershell before executing this script
#####################################################################################`,
    PnPPowerShell_AddSiteScript: `
### Add {{title}} Site Script
$script = Get-Content "{{jsonFileName}}"
Add-PnPSiteScript -Title "{{title}}" -Description "{{description}}" -Content $script
    `,
    O365cli_PS_Header: `
#####################################################################################
### Office 365 CLI script (PowerShell) generated by Site Designs Studio
### Make sure to be logged in with O365 CLI before executing this script
#####################################################################################`,
    O365cli_PS_AddSiteScript: `
### Add {{title}} Site Script
$script = Get-Content "{{jsonFileName}}"
o365 spo sitescript add --title "{{title}}" --description "{{description}}" --content $script`,
    O365cli_Bash_Header: `
#!/bin/bash
#####################################################################################
### Office 365 CLI script (Bash) generated by Site Designs Studio
### Make sure to be logged in with O365 CLI before executing this script
#####################################################################################`,
    O365cli_Bash_AddSiteScript: `
### Add {{title}} Site Script
script = $(<"{{jsonFileName}}")
o365 spo sitescript add --title "{{title}}" --description "{{description}}" --content $script`,
};


class ExportService implements IExportService {

    constructor(serviceScope: ServiceScope) {

    }

    public async generateSiteScriptJSONExportPackage(siteScript: ISiteScript): Promise<ExportPackage> {
        const scriptContentJSON = toJSON(siteScript.Content);
        const pkg = new ExportPackage(siteScript.Title);
        pkg.addOrUpdateFile(`${siteScript.Title}.json`, scriptContentJSON);
        return pkg;
    }
    public async generateSiteScriptPnPPowershellExportPackage(siteScript: ISiteScript): Promise<ExportPackage> {
        // Create a new package
        const pkg = new ExportPackage(siteScript.Title);
        // Add the JSON of the site script to the zip
        const scriptContentJSON = toJSON(siteScript.Content);
        const jsonFileName = `${siteScript.Title}.json`;
        pkg.addOrUpdateFile(jsonFileName, scriptContentJSON);

        const processedTemplate = Templates.PnPPowerShell_Header + '\n' + Templates.PnPPowerShell_AddSiteScript
            .replace(/\{\{title\}\}/g, siteScript.Title || "SiteScript - No title")
            .replace(/\{\{jsonFileName\}\}/g, jsonFileName)
            .replace(/\{\{description\}\}/g, siteScript.Description || "");
        pkg.addOrUpdateFile("AddSiteScript.ps1", processedTemplate);
        return pkg;
    }
    public generateSiteScriptPnPTemplateExportPackage(siteScript: ISiteScript): Promise<ExportPackage> {
        throw new Error("Method not implemented.");
    }
    public async generateSiteScriptO365CLIExportPackage(siteScript: ISiteScript, flavour: "Powershell" | "Bash" = "Powershell"): Promise<ExportPackage> {
        // Create a new package
        const pkg = new ExportPackage(siteScript.Title);
        // Add the JSON of the site script to the zip
        const scriptContentJSON = toJSON(siteScript.Content);
        const jsonFileName = `${siteScript.Title}.json`;
        pkg.addOrUpdateFile(jsonFileName, scriptContentJSON);

        if (flavour == "Powershell") {
            const processedTemplate = Templates.O365cli_PS_Header + '\n' + Templates.O365cli_PS_AddSiteScript
                .replace(/\{\{title\}\}/g, siteScript.Title || "SiteScript - No title")
                .replace(/\{\{jsonFileName\}\}/g, jsonFileName)
                .replace(/\{\{description\}\}/g, siteScript.Description || "");
            pkg.addOrUpdateFile("AddSiteScript.ps1", processedTemplate);
        } else {
            const processedTemplate = Templates.O365cli_Bash_Header + '\n' + Templates.O365cli_Bash_AddSiteScript
                .replace(/\{\{title\}\}/g, siteScript.Title || "SiteScript - No title")
                .replace(/\{\{jsonFileName\}\}/g, jsonFileName)
                .replace(/\{\{description\}\}/g, siteScript.Description || "");
            pkg.addOrUpdateFile("AddSiteScript.sh", processedTemplate);
        }
        return pkg;
    }

}

export const ExportServiceKey = ServiceKey.create<IExportService>('YPCODE:SDSv2:ExportService', ExportService);